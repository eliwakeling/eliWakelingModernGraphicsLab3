//Author: Eli Wakeling, Code's intent is to recreate code used for "Raytracing in one weekend", in GLSL).

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}
// hittable struct
struct hit_record {
    vec3 p;
    vec3 normal;
    float t;

};

bool hit (in vec4 rayDirection, in vec4 rayOrigin, float t_min, float t_max){
return false;
}

struct sphereHit {
    vec3 p;
  	vec3 center;
    vec3 normal;
    float t;
    float r;
    bool front_face;
};

sphereHit structSphereHit(in vec4 rayDirection, in vec4 rayOrigin, float t_min, float t_max, vec3 centerpoint, float radius) {
    //see hit_sphere, some code has been made to be more effecient.
    vec3 oc = rayOrigin.xyz - centerpoint;
    float a = dot(rayDirection, rayDirection);
    //only half of a B from hit_sphere, this is done to remove multipliers from the code.
    float halfb = dot(oc, rayDirection.xyz);
    float c = dot(oc, oc) - radius * radius;
    
    float discriminant = halfb*halfb - a*c;
    
    if (discriminant > 0.0) {
    float root = sqrt(discriminant);
    float temp = (-halfb - root) / a;
    
        if (temp < t_max && temp > t_min) {
            //determines if the current normal is facing outward.
        vec3 outward_normal = ((rayDirection.xyz * temp) - oc) / radius;
        bool front_face = dot(rayDirection.xyz, outward_normal) < 0.0;
        vec3 normal = front_face ? outward_normal :-outward_normal;
        return sphereHit(rayDirection.xyz * temp, oc, normal, temp, radius, front_face);
        }
        
    temp = (-halfb + root / a);
        if (temp < t_max && temp > t_min) {
            //determines if the current normal is facing outward.
        vec3 outward_normal = ((rayDirection.xyz * temp) - oc) / radius;
        bool front_face = dot(rayDirection.xyz, outward_normal) < 0.0;
        vec3 normal = front_face ? outward_normal :-outward_normal;
        return sphereHit(rayDirection.xyz * temp, oc, normal, temp, radius, front_face);
        }
    }
}

struct hittable_list {

	sphereHit sphereList[2];

};

//Creates the sphere to be hit.
/*float hit_sphere(float radius, in vec4 rayDirection, in vec3 centerpoint, in vec4 rayOrigin){

    //Set the center point of the sphere.
    vec3 oc = rayOrigin.xyz - centerpoint;
    //create the sphere.
    float a = dot(rayDirection, rayDirection);
    float b = 2.0 * dot(oc, rayDirection.xyz);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = b*b - 4.0*a*c;
    
    if (discriminant < 0.0){
    return -1.0;
    } else {
        return (-b - sqrt(discriminant)) / (2.0*a);
    }
    
}*/

//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin, vec2 resolute)
{

	// Set Sphere location.
  // float hitt = hit_sphere(0.5, rayDirection, vec3(0.0, 0.0, -1.0), rayOrigin);
    
        //hitlist
    //declare spheres.
    sphereHit sphere1;
    sphereHit sphere2;
    //return spheres from a function.
    sphere1 = structSphereHit(rayDirection, rayOrigin, -1.0, 1.0, vec3(0.0, 0.0, -1.0), 0.5);
    sphere2 = structSphereHit(rayDirection, rayOrigin, -1.0, 1.0, vec3(0.0, -100.3, -1.0), 100.0);
    
    // If the sphere is hit.
       if (sphere1.t > 0.0){
        //Render the Sphere
		vec3 a2 = vec3(sphere1.t, sphere1.t, sphere1.t);
        vec3 N = normalize(rayOrigin.xyz + rayDirection.xyz * sphere1.t - vec3(0.0, 0.0, -1.0));
        vec3 N2 = 0.5 * vec3(N + 1.0);
        return vec4(vec3(N2), 1.0);
       // return vec4(1, 0, 0, 1);
       }
    
          if (sphere2.t > 0.0){
           return vec4 (0.0,1.0,0.0,1.0);   
          }
        //Vec4s appropriated from the book to simulate the background.
   //Set white and Blue colors
   vec4 w = vec4(1.0, 1.0, 1.0, 1.0);
   vec4 b = vec4(0.5, 0.7, 1.0, 1.0);
   float d = 0.5*(rayDirection.y + 1.0);
   //T =  White · (1 - rayDirection.y) + Blue · rayDirection.y
   //Creates a blended gradient much like the raytracing example.
   vec4 t = mix( w, b, d);
   return t;
}



/* //DUMMY FUNCTION

vec4 addColor (in int index){
return vec4(float(index))
}


*/

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;
   


    // ray
    vec4 rayDirection, rayOrigin;
    

    


    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);

    // color
    fragColor = calcColor(rayDirection, rayOrigin, iResolution.xy);


}